#include <stdio.h>
#include <stdlib.h>
#include <string.h>
// Node structure
typedef struct Node {
char word[50];
char meaning[100];
struct Node *left, *right;
} Node;
// Function to create a new node
Node* createNode(char word[], char meaning[]) {
Node* newNode = (Node*)malloc(sizeof(Node));
strcpy(newNode->word, word);
strcpy(newNode->meaning, meaning);
newNode->left = newNode->right = NULL;
return newNode;
}
// Insert a word-meaning pair into the BST
Node* insert(Node* root, char word[], char meaning[]) {
if (root == NULL)
return createNode(word, meaning);
if (strcmp(word, root->word) < 0)
root->left = insert(root->left, word, meaning);
else if (strcmp(word, root->word) > 0)
root->right = insert(root->right, word, meaning);
else
strcpy(root->meaning, meaning); // Update meaning if word exists
return root;
}
// Search for a word in the BST
void search(Node* root, char word[]) {
if (root == NULL) {
printf("Word not found.\n");
return;
}
if (strcmp(word, root->word) == 0)
printf("Meaning of '%s': %s\n", root->word, root->meaning);
else if (strcmp(word, root->word) < 0)
search(root->left, word);
else
search(root->right, word);
}
// Find minimum node (used in delete)
Node* findMin(Node* root) {

while (root->left != NULL)
root = root->left;
return root;
}
// Delete a word from the BST
Node* delete(Node* root, char word[]) {
if (root == NULL)
return NULL;
if (strcmp(word, root->word) < 0)
root->left = delete(root->left, word);
else if (strcmp(word, root->word) > 0)
root->right = delete(root->right, word);
else {
// Node with only one child or no child
if (root->left == NULL) {
Node* temp = root->right;
free(root);
return temp;
}
else if (root->right == NULL) {
Node* temp = root->left;
free(root);
return temp;
}
// Node with two children
Node* temp = findMin(root->right);
strcpy(root->word, temp->word);
strcpy(root->meaning, temp->meaning);
root->right = delete(root->right, temp->word);
}
return root;
}
// Inorder traversal to display dictionary in sorted order
void inorder(Node* root) {
if (root != NULL) {
inorder(root->left);
printf("%s : %s\n", root->word, root->meaning);
inorder(root->right);
}
}
// Main function to demonstrate functionality
int main() {
Node* root = NULL;
// Inserting some word-meaning pairs
root = insert(root, "apple", "a fruit");

root = insert(root, "book", "collection of pages");
root = insert(root, "cat", "a small animal");
root = insert(root, "dog", "a loyal animal");
root = insert(root, "elephant", "a large animal");
printf("Dictionary (Inorder Traversal):\n");
inorder(root);
printf("\nSearching for 'book':\n");
search(root, "book");
printf("\nDeleting 'apple'\n");
root = delete(root, "apple");
printf("\nDictionary after deletion:\n");
inorder(root);
return 0;
}